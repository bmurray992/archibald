name: ArchieOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      # Add services if needed for integration tests
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
        sudo apt-get install -y sqlite3 libsqlite3-dev
        sudo apt-get install -y build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-asyncio pytest-mock pytest-xdist
        pip install coverage[toml]
        
    - name: Install ArchieOS in development mode
      run: |
        pip install -e .

    - name: Lint with flake8 (optional)
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Type check with mypy (optional)
      run: |
        pip install mypy types-requests types-jwt
        mypy archie_core/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

    - name: Create test environment
      run: |
        mkdir -p test_data
        mkdir -p htmlcov
        export ARCHIE_DATA_ROOT="./test_data"
        export ARCHIE_TEST_MODE="true"

    - name: Run unit tests
      run: |
        export ARCHIE_DATA_ROOT="./test_data"
        export ARCHIE_TEST_MODE="true"
        pytest tests/ -v -m "unit or not integration" --cov-config=.coveragerc

    - name: Run integration tests
      run: |
        export ARCHIE_DATA_ROOT="./test_data"
        export ARCHIE_TEST_MODE="true"
        pytest tests/ -v -m "integration" --cov-config=.coveragerc --cov-append
      continue-on-error: true

    - name: Generate coverage report
      run: |
        coverage combine
        coverage report
        coverage html
        coverage xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          junit.xml
          htmlcov/
          coverage.xml

    - name: Archive logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: logs-${{ matrix.python-version }}
        path: |
          *.log
          test_data/
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan with bandit
      run: |
        pip install bandit[toml]
        bandit -r archie_core/ api/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run dependency check
      run: |
        pip install safety
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        export ARCHIE_DATA_ROOT="./perf_test_data"
        export ARCHIE_TEST_MODE="true"
        pytest tests/ -v -m "slow" --benchmark-only --benchmark-json=benchmark.json
      continue-on-error: true

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: benchmark.json

  build-docs:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints

    - name: Generate API documentation
      run: |
        mkdir -p docs/api
        sphinx-apidoc -o docs/api archie_core/ api/
        # sphinx-build -b html docs/ docs/_build/html/
      continue-on-error: true

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: documentation
        path: docs/